#ifndef _TARR_TAD_
#define _TARR_TAD_

#include <iostream>
#include <stdlib.h>
#include "../../funciones/arrays.hpp"


using namespace std;

template<typename T>
struct Array
{
   int cap = 100;
   int len = 0;
   T* a;
};

template<typename T>
Array<T> array()
{
   Array<T> ret;
   ret.a = new T[ret.cap];
   return ret;
}

template<typename T>
int arrayAdd(Array<T>& a,T t)
{
   return add<T>(a.a,a.len,t);
}

template<typename T>
T* arrayGet(Array<T> a,int p)
{
   return &a.a[p];
}

template<typename T>
void arraySet(Array<T>& a,int p,T t)
{
   T arr =remove(a.a,a.len,p);
   arr = insert(a,a.len,t,p);
}

template<typename T>
void arrayInsert(Array<T>& a,T t,int p)
{
   insert(a.a,a.len ,t, p);
}

template<typename T>
int arraySize(Array<T> a)
{
   return a.len;
}

template<typename T>
T arrayRemove(Array<T>& a,int p)
{
   T t = remove(a.a,a.len,p);
   return t;
}

template<typename T>
void arrayRemoveAll(Array<T>& a)
{
   while(a.len != 0){
     remove(a.a,a.len,0);
   }
}

template<typename T,typename K>
int arrayFind(Array<T> a,K k,int cmpTK(T,K))
{
   return find(a.a,a.len,k,cmpTK);
}

template<typename T>
int arrayOrderedInsert(Array<T>& a,T t,int cmpTT(T,T))
{
   return orderedInsert(a.a,a.len,t,cmpTT);
}

template<typename T>
T* arrayDiscover(Array<T>& a,T t,int cmpTT(T,T))
{

   return NULL;
}


template<typename T>
void arraySort(Array<T>& a,int cmpTT(T,T))
{
   sort(a.a,a.len,cmpTT);
}

#endif
