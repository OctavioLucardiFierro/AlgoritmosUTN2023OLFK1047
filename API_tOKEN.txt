#ifndef _TTOKENS_T_
#define _TTOKENS_T_

#include <iostream>
#include <stdio.h>
#include "strings.hpp"
using namespace std;

int tokenCount(string s,char sep)
{
   int cantTok = 1;
   int pos = 0;
   while(s[pos] != '\0'){
      if(s[pos] == sep){
         cantTok++;
      }
      pos++;
   }
   return cantTok;
}

void addToken(string& s,char sep,string t)
{

   if(length(s)>0){
      s = s + charToString(sep) + t;
   }else{
      s = s + t;
   }

}

string getTokenAt(string s, char sep, int i) {
   int pos = 0;
   int posStart = 0;
   int cantPalabra = 0;
   while (s[pos] != '\0') {
      if (s[pos] == sep && cantPalabra != i) {
         cantPalabra++;
         posStart = pos + 1;
      }
      pos++;
   }

   string Token(pos - posStart, ' ');
   pos = 0;
   while (s[posStart] != '\0' && s[posStart] != sep) {
      Token[pos] = s[posStart];
      pos++;
      posStart++;
   }
   return trim(Token);
}


void removeTokenAt(string& s,char sep, int i)
{
   string newToken = "";
   for(int x = 0;x<tokenCount(s,sep);x++){
      if(x != i){
         addToken(newToken,sep,trim(getTokenAt(s,sep,x)));
      }

   }
   s = newToken;
}

void setTokenAt(string& s,char sep, string t,int i)
{
   string newToken = "";
   for(int x = 0;x<tokenCount(s,sep);x++){
      if(x != i){
         addToken(newToken,sep,trim(getTokenAt(s,sep,x)));
      }else{
         addToken(newToken,sep,t);
      }

   }
   s = newToken;
}

int findToken(string s,char sep, string t)
{
   for(int x = 0;x < tokenCount(s,sep);x++){
         if(trim(getTokenAt(s,sep,x)) == t){
               return x;
            }
         }

   return -1;
}

#endif
