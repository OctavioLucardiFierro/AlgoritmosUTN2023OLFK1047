#ifndef _TMAP_TAD_
#define _TMAP_TAD_

#include <iostream>
#include "Array.hpp"

using namespace std;

template<typename K,typename V>
struct Map
{
   Array<K> keys;
   Array<V> values;
   int posActual = 0;
};

template<typename K,typename V>
Map<K,V> map()
{
   Map<K, V> m;
   m.keys = array<K>();
   m.values = array<V>();
   m.posActual = 0;
   return m;
}

template<typename K,typename V>
V* mapGet(Map<K,V> m,K k)
{
   for(int i = 0;i<arraySize<K>(m.keys);i++){
      if(m.keys.a[i]==k){
         return &(m.values.a[i]);
      }
   }
   return NULL;
}

template<typename K,typename V>
V* mapPut(Map<K,V>& m,K k,V v)
{
   int pos = -1;
   int newPos;
   for(int i = 0;i<arraySize<K>(m.keys);i++){
         if(m.keys.a[i]==k){
           pos = i;
           break;
         }
      }
   if(pos>(-1)){
      arrayRemove<V>(m.values,pos);
      arrayInsert<V>(m.values,v,pos);
      return arrayGet<V>(m.values,pos);
   }else{
      newPos = arrayAdd<K>(m.keys,k);
      arrayInsert<V>(m.values,v,newPos);
      return arrayGet<V>(m.values,newPos);
   }

}

template<typename K,typename V>
bool mapContains(Map<K,V> m,K k)
{
   for(int i = 0;i<arraySize<K>(m.keys);i++){
      if(m.keys.a[i]==k){
         return true;
      }
   }
   return false;
}

template<typename K,typename V>
V mapRemove(Map<K,V>& m,K k)
{
   int pos;
   V v;
   for(int i = 0;i<arraySize<K>(m.keys);i++){
      if(m.keys.a[i]==k){
         pos = i;
         break;
      }
    }
   v = *(arrayGet<V>(m.values,pos));
   arrayRemove<V>(m.values,pos);
   return v;
}

template<typename K,typename V>
void mapRemoveAll(Map<K,V>& m)
{
   arrayRemoveAll(m.values);
}

template<typename K,typename V>
int mapSize(Map<K,V> m)
{
   return arraySize<V>(m.values);
}

template<typename K,typename V>
bool mapHasNext(Map<K,V> m)
{

   return m.posActual < arraySize(m.values);
}

template<typename K,typename V>
K mapNextKey(Map<K,V>& m)
{

   K* keyNext = arrayGet<K>(m.keys,m.posActual);
   m.posActual++;
   return *keyNext;
}

template<typename K,typename V>
V* mapNextValue(Map<K,V>& m)
{
   V* valueNext = arrayGet<V>(m.values,m.posActual);
   m.posActual++;
   return valueNext;
}

template<typename K,typename V>
void mapReset(Map<K,V>& m)
{
   m.posActual = 0;
}

template<typename K,typename V>
V* mapDiscover(Map<K,V>& m,K k,V v)
{

   int pos = -1;
      for(int i = 0;i<arraySize<K>(m.keys);i++){
            if(m.keys.a[i]==k){
              pos = i;
              break;
            }
         }
      if(pos>(-1)){
         arrayRemove<V>(m.values,pos);
         arrayInsert<V>(m.values,v,pos);
      }else{
         arrayAdd<V>(m.values,v);
         arrayAdd<K>(m.keys,k);
      }
      return arrayGet<V>(m.values,pos+1);
}


template<typename K,typename V>
void mapSortByKeys(Map<K,V>& m,int cmpKK(K,K))
{
   Map<K, V> aux = map<K, V>();

   arrayCopy<K>(aux.keys,m.keys);
   arrayCopy<V>(aux.values,m.values);

   arraySort<K>(aux.keys,cmpKK);  //ordeno el array keys
   for( int i = 0; i<arraySize(m.keys); i++ )
   {

      K* keyMapOri = arrayGet<K>(m.keys,i);                           //Obtengo la primer key
      int newPos = arrayFind<K,K>(aux.keys,*keyMapOri,cmpKK);   // Busco la pos de la primer key en el nuevo array

      V* valueMapOri = arrayGet<V>(m.values,i);              //Busco el valor asoscioado a la primera pos del array
      arraySet(aux.values,newPos, *valueMapOri);     // Reemplazo el valor obtenido en la pos en la que esta la key
   }

   arrayCopy<K>(m.keys,aux.keys);//Actualizo los arrays originales
   arrayCopy<V>(m.values,aux.values);
}

template<typename K,typename V>
void mapSortByValues(Map<K,V>& m,int cmpVV(V,V))
{
   Map<K, V> aux = map<K, V>();

      arrayCopy<V>(aux.values,m.values);
      arrayCopy<K>(aux.keys,m.keys);

      arraySort<V>(aux.values,cmpVV);  //ordeno el array keys
      for( int i = 0; i<arraySize(m.keys); i++ )
      {

         V* valMapOri = arrayGet<V>(m.values,i);                       //Obtengo la primer key
         int newPos = arrayFind<V,V>(aux.values,*valMapOri,cmpVV);     // Busco la pos de la primer key en el nuevo array

         K* keyMapOri = arrayGet<K>(m.keys,i);                   //Busco el valor asoscioado a la primera pos del array
         arraySet(aux.keys,newPos, *keyMapOri);                  // Reemplazo el valor obtenido en la pos en la que esta la key
      }

      arrayCopy<K>(m.keys,aux.keys);//Actualizo los arrays originales
      arrayCopy<V>(m.values,aux.values);

}

#endif

