#ifndef _TARRAYS_T_
#define _TARRAYS_T_

#include <iostream>

template <typename T>
int add(T arr[],int& len,T e)
{
   arr[len] = e;
   len++;
   return len-1;
}

template <typename T>
void insert(T arr[],int& len,T e,int p)
{

   // Desplazamos los elementos hacia adelante para hacer espacio para el nuevo elemento
   for (int i = len; i > p; i--) {
       arr[i] = arr[i - 1];
   }
   // Insertamos el nuevo elemento en la posici√≥n p
   arr[p] = e;
   // Incrementamos la longitud del array
   len++;
}

template <typename T>
T remove(T arr[],int& len,int p)
{
   T ret = arr[p];
   // Desplazamos los elementos hacia adelante para hacer espacio para el nuevo elemento
   for (int i = p; i < len - 1; i++) {
          arr[i] = arr[i + 1];
      }

   // Incrementamos la longitud del array
   len--;
   return ret;
}

template <typename T, typename K>
int find(T arr[],int len,K k,int cmpTK(T,K))
{
   int result;
   for(int i = 0;i<len;i++){
      result = cmpTK(arr[i],k);
      if (result == 0){
         return i;
      }
   }
   return -1;
}

template <typename T>
int orderedInsert(T arr[],int& len,T e,int cmpTT(T,T))
{
   int posInsert;
   for(int i = 0;i < len;i++){
      if(cmpTT(arr[i],e) == -1){
         posInsert = i+1;
         insert(arr,len,e,posInsert);
      }
   }
   return posInsert;
}

template <typename T>
void sort(T arr[],int len,int cmpTT(T,T))
{
   for (int i = 0; i < len - 1; i++) {
           for (int j = 0; j < len - i - 1; j++) {
               if (cmpTT(arr[j + 1], arr[j])<0) {
                  T temp = arr[j];
                  arr[j] = arr[j + 1];
                  arr[j + 1] = temp;

               }
           }
       }
}


#endif
